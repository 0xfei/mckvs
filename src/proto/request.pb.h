// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#ifndef PROTOBUF_INCLUDED_request_2eproto
#define PROTOBUF_INCLUDED_request_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_request_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_request_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_request_2eproto();
class KeyChain;
class KeyChainDefaultTypeInternal;
extern KeyChainDefaultTypeInternal _KeyChain_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
namespace google {
namespace protobuf {
template<> ::KeyChain* Arena::CreateMaybeMessage<::KeyChain>(Arena*);
template<> ::Request* Arena::CreateMaybeMessage<::Request>(Arena*);
template<> ::Response* Arena::CreateMaybeMessage<::Response>(Arena*);
}  // namespace protobuf
}  // namespace google

enum KeyType {
  VECTOR = 0,
  STRING = 1
};
bool KeyType_IsValid(int value);
const KeyType KeyType_MIN = VECTOR;
const KeyType KeyType_MAX = STRING;
const int KeyType_ARRAYSIZE = KeyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* KeyType_descriptor();
inline const ::std::string& KeyType_Name(KeyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    KeyType_descriptor(), value);
}
inline bool KeyType_Parse(
    const ::std::string& name, KeyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KeyType>(
    KeyType_descriptor(), name, value);
}
enum RequestType {
  GET = 0,
  SET = 1,
  DEL = 2
};
bool RequestType_IsValid(int value);
const RequestType RequestType_MIN = GET;
const RequestType RequestType_MAX = DEL;
const int RequestType_ARRAYSIZE = RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestType_descriptor();
inline const ::std::string& RequestType_Name(RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestType_descriptor(), value);
}
inline bool RequestType_Parse(
    const ::std::string& name, RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestType>(
    RequestType_descriptor(), name, value);
}
// ===================================================================

class KeyChain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KeyChain) */ {
 public:
  KeyChain();
  virtual ~KeyChain();

  KeyChain(const KeyChain& from);

  inline KeyChain& operator=(const KeyChain& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyChain(KeyChain&& from) noexcept
    : KeyChain() {
    *this = ::std::move(from);
  }

  inline KeyChain& operator=(KeyChain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const KeyChain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyChain* internal_default_instance() {
    return reinterpret_cast<const KeyChain*>(
               &_KeyChain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(KeyChain* other);
  friend void swap(KeyChain& a, KeyChain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyChain* New() const final {
    return CreateMaybeMessage<KeyChain>(NULL);
  }

  KeyChain* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeyChain>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeyChain& from);
  void MergeFrom(const KeyChain& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyChain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string vec = 3;
  int vec_size() const;
  void clear_vec();
  static const int kVecFieldNumber = 3;
  const ::std::string& vec(int index) const;
  ::std::string* mutable_vec(int index);
  void set_vec(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_vec(int index, ::std::string&& value);
  #endif
  void set_vec(int index, const char* value);
  void set_vec(int index, const char* value, size_t size);
  ::std::string* add_vec();
  void add_vec(const ::std::string& value);
  #if LANG_CXX11
  void add_vec(::std::string&& value);
  #endif
  void add_vec(const char* value);
  void add_vec(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& vec() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_vec();

  // optional string root = 2;
  bool has_root() const;
  void clear_root();
  static const int kRootFieldNumber = 2;
  const ::std::string& root() const;
  void set_root(const ::std::string& value);
  #if LANG_CXX11
  void set_root(::std::string&& value);
  #endif
  void set_root(const char* value);
  void set_root(const char* value, size_t size);
  ::std::string* mutable_root();
  ::std::string* release_root();
  void set_allocated_root(::std::string* root);

  // optional uint64 ttl = 4;
  bool has_ttl() const;
  void clear_ttl();
  static const int kTtlFieldNumber = 4;
  ::google::protobuf::uint64 ttl() const;
  void set_ttl(::google::protobuf::uint64 value);

  // required .KeyType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::KeyType type() const;
  void set_type(::KeyType value);

  // @@protoc_insertion_point(class_scope:KeyChain)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> vec_;
  ::google::protobuf::internal::ArenaStringPtr root_;
  ::google::protobuf::uint64 ttl_;
  int type_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(NULL);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KeyChain subkey = 3;
  int subkey_size() const;
  void clear_subkey();
  static const int kSubkeyFieldNumber = 3;
  ::KeyChain* mutable_subkey(int index);
  ::google::protobuf::RepeatedPtrField< ::KeyChain >*
      mutable_subkey();
  const ::KeyChain& subkey(int index) const;
  ::KeyChain* add_subkey();
  const ::google::protobuf::RepeatedPtrField< ::KeyChain >&
      subkey() const;

  // optional .KeyChain root = 2;
  bool has_root() const;
  void clear_root();
  static const int kRootFieldNumber = 2;
  const ::KeyChain& root() const;
  ::KeyChain* release_root();
  ::KeyChain* mutable_root();
  void set_allocated_root(::KeyChain* root);

  // required .RequestType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::RequestType type() const;
  void set_type(::RequestType value);

  // @@protoc_insertion_point(class_scope:Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::KeyChain > subkey_;
  ::KeyChain* root_;
  int type_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(NULL);
  }

  Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string value = 2;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value(int index) const;
  ::std::string* mutable_value(int index);
  void set_value(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_value(int index, ::std::string&& value);
  #endif
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  ::std::string* add_value();
  void add_value(const ::std::string& value);
  #if LANG_CXX11
  void add_value(::std::string&& value);
  #endif
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& value() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_value();

  // required uint32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::uint32 code() const;
  void set_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> value_;
  ::google::protobuf::uint32 code_;
  friend struct ::TableStruct_request_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyChain

// required .KeyType type = 1;
inline bool KeyChain::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KeyChain::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::KeyType KeyChain::type() const {
  // @@protoc_insertion_point(field_get:KeyChain.type)
  return static_cast< ::KeyType >(type_);
}
inline void KeyChain::set_type(::KeyType value) {
  assert(::KeyType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:KeyChain.type)
}

// optional string root = 2;
inline bool KeyChain::has_root() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyChain::clear_root() {
  root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& KeyChain::root() const {
  // @@protoc_insertion_point(field_get:KeyChain.root)
  return root_.GetNoArena();
}
inline void KeyChain::set_root(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KeyChain.root)
}
#if LANG_CXX11
inline void KeyChain::set_root(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KeyChain.root)
}
#endif
inline void KeyChain::set_root(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000001u;
  root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KeyChain.root)
}
inline void KeyChain::set_root(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KeyChain.root)
}
inline ::std::string* KeyChain::mutable_root() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:KeyChain.root)
  return root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyChain::release_root() {
  // @@protoc_insertion_point(field_release:KeyChain.root)
  if (!has_root()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000001u;
  return root_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyChain::set_allocated_root(::std::string* root) {
  if (root != NULL) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root);
  // @@protoc_insertion_point(field_set_allocated:KeyChain.root)
}

// repeated string vec = 3;
inline int KeyChain::vec_size() const {
  return vec_.size();
}
inline void KeyChain::clear_vec() {
  vec_.Clear();
}
inline const ::std::string& KeyChain::vec(int index) const {
  // @@protoc_insertion_point(field_get:KeyChain.vec)
  return vec_.Get(index);
}
inline ::std::string* KeyChain::mutable_vec(int index) {
  // @@protoc_insertion_point(field_mutable:KeyChain.vec)
  return vec_.Mutable(index);
}
inline void KeyChain::set_vec(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:KeyChain.vec)
  vec_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void KeyChain::set_vec(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:KeyChain.vec)
  vec_.Mutable(index)->assign(std::move(value));
}
#endif
inline void KeyChain::set_vec(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vec_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KeyChain.vec)
}
inline void KeyChain::set_vec(int index, const char* value, size_t size) {
  vec_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KeyChain.vec)
}
inline ::std::string* KeyChain::add_vec() {
  // @@protoc_insertion_point(field_add_mutable:KeyChain.vec)
  return vec_.Add();
}
inline void KeyChain::add_vec(const ::std::string& value) {
  vec_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KeyChain.vec)
}
#if LANG_CXX11
inline void KeyChain::add_vec(::std::string&& value) {
  vec_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KeyChain.vec)
}
#endif
inline void KeyChain::add_vec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vec_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KeyChain.vec)
}
inline void KeyChain::add_vec(const char* value, size_t size) {
  vec_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KeyChain.vec)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
KeyChain::vec() const {
  // @@protoc_insertion_point(field_list:KeyChain.vec)
  return vec_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
KeyChain::mutable_vec() {
  // @@protoc_insertion_point(field_mutable_list:KeyChain.vec)
  return &vec_;
}

// optional uint64 ttl = 4;
inline bool KeyChain::has_ttl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyChain::clear_ttl() {
  ttl_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 KeyChain::ttl() const {
  // @@protoc_insertion_point(field_get:KeyChain.ttl)
  return ttl_;
}
inline void KeyChain::set_ttl(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ttl_ = value;
  // @@protoc_insertion_point(field_set:KeyChain.ttl)
}

// -------------------------------------------------------------------

// Request

// required .RequestType type = 1;
inline bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::RequestType Request::type() const {
  // @@protoc_insertion_point(field_get:Request.type)
  return static_cast< ::RequestType >(type_);
}
inline void Request::set_type(::RequestType value) {
  assert(::RequestType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:Request.type)
}

// optional .KeyChain root = 2;
inline bool Request::has_root() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::clear_root() {
  if (root_ != NULL) root_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::KeyChain& Request::root() const {
  const ::KeyChain* p = root_;
  // @@protoc_insertion_point(field_get:Request.root)
  return p != NULL ? *p : *reinterpret_cast<const ::KeyChain*>(
      &::_KeyChain_default_instance_);
}
inline ::KeyChain* Request::release_root() {
  // @@protoc_insertion_point(field_release:Request.root)
  _has_bits_[0] &= ~0x00000001u;
  ::KeyChain* temp = root_;
  root_ = NULL;
  return temp;
}
inline ::KeyChain* Request::mutable_root() {
  _has_bits_[0] |= 0x00000001u;
  if (root_ == NULL) {
    auto* p = CreateMaybeMessage<::KeyChain>(GetArenaNoVirtual());
    root_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Request.root)
  return root_;
}
inline void Request::set_allocated_root(::KeyChain* root) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete root_;
  }
  if (root) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      root = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:Request.root)
}

// repeated .KeyChain subkey = 3;
inline int Request::subkey_size() const {
  return subkey_.size();
}
inline void Request::clear_subkey() {
  subkey_.Clear();
}
inline ::KeyChain* Request::mutable_subkey(int index) {
  // @@protoc_insertion_point(field_mutable:Request.subkey)
  return subkey_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::KeyChain >*
Request::mutable_subkey() {
  // @@protoc_insertion_point(field_mutable_list:Request.subkey)
  return &subkey_;
}
inline const ::KeyChain& Request::subkey(int index) const {
  // @@protoc_insertion_point(field_get:Request.subkey)
  return subkey_.Get(index);
}
inline ::KeyChain* Request::add_subkey() {
  // @@protoc_insertion_point(field_add:Request.subkey)
  return subkey_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KeyChain >&
Request::subkey() const {
  // @@protoc_insertion_point(field_list:Request.subkey)
  return subkey_;
}

// -------------------------------------------------------------------

// Response

// required uint32 code = 1;
inline bool Response::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::clear_code() {
  code_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 Response::code() const {
  // @@protoc_insertion_point(field_get:Response.code)
  return code_;
}
inline void Response::set_code(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  code_ = value;
  // @@protoc_insertion_point(field_set:Response.code)
}

// repeated string value = 2;
inline int Response::value_size() const {
  return value_.size();
}
inline void Response::clear_value() {
  value_.Clear();
}
inline const ::std::string& Response::value(int index) const {
  // @@protoc_insertion_point(field_get:Response.value)
  return value_.Get(index);
}
inline ::std::string* Response::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:Response.value)
  return value_.Mutable(index);
}
inline void Response::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Response.value)
  value_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Response::set_value(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Response.value)
  value_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Response::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Response.value)
}
inline void Response::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Response.value)
}
inline ::std::string* Response::add_value() {
  // @@protoc_insertion_point(field_add_mutable:Response.value)
  return value_.Add();
}
inline void Response::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Response.value)
}
#if LANG_CXX11
inline void Response::add_value(::std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Response.value)
}
#endif
inline void Response::add_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Response.value)
}
inline void Response::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Response.value)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Response::value() const {
  // @@protoc_insertion_point(field_list:Response.value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Response::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:Response.value)
  return &value_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::KeyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KeyType>() {
  return ::KeyType_descriptor();
}
template <> struct is_proto_enum< ::RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RequestType>() {
  return ::RequestType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_request_2eproto
